name: Python Package using Conda

on: [push]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      max-parallel: 5

    env:
      DEPLOY_DIR: /home/ubuntu/demo_python_deployment
      EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      EC2_USER: ${{ secrets.EC2_USER }}
      APP_PORT: 8080
      CONTAINER_NAME: python_app_container

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12.11
      uses: actions/setup-python@v3
      with:
        python-version: '3.12.11'
        
    - name: Add conda to system path
      run: |
        echo $CONDA/bin >> $GITHUB_PATH
        
    - name: Install dependencies locally
      run: |
        conda env update --file environment.yml --name base

    - name: Set up SSH key
      run: |
        echo "$EC2_SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key
        echo "✅ SSH key configured successfully"

    - name: Test EC2 Connection
      timeout-minutes: 3
      run: |
        echo "🔗 Testing connection to EC2 instance..."
        echo "🖥️ Target server: $EC2_INSTANCE_IP"
        echo "👤 Target user: $EC2_USER"
        
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i private_key $EC2_USER@$EC2_INSTANCE_IP << 'ENDSSH'
          echo "✅ SSH connection successful!"
          echo "🖥️ Connected to: $(hostname)"
          echo "👤 Logged in as: $(whoami)"
          echo "📍 Working directory: $(pwd)"
          echo "🐧 OS Info: $(lsb_release -d 2>/dev/null || echo "$(uname -s) $(uname -r)")"
          echo "💾 Disk space: $(df -h / | tail -1 | awk '{print $4}' | sed 's/G/ GB/')"
          echo "🔧 Python version: $(python3 --version 2>/dev/null || echo "Python not found")"
        ENDSSH
        
        echo "🎉 EC2 connection test completed successfully!"

    - name: Prepare Environment on EC2
      timeout-minutes: 8
      run: |
        echo "🔧 Preparing environment on EC2..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i private_key $EC2_USER@$EC2_INSTANCE_IP << 'ENDSSH'
          set -e
          
          # Function for logging
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          log "🚀 Starting environment preparation..."
          
          # Install miniconda if not present
          if ! command -v conda &> /dev/null; then
            log "📦 Installing Miniconda..."
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            bash miniconda.sh -b -p $HOME/miniconda
            export PATH="$HOME/miniconda/bin:$PATH"
            conda init bash
            source ~/.bashrc
          else
            log "✅ Conda already installed"
          fi
          
          # Update system packages (only if needed)
          log "📦 Checking system dependencies..."
          if ! command -v tesseract &> /dev/null || ! dpkg -l | grep -q build-essential; then
            log "Installing missing system packages..."
            sudo apt-get update -qq
            sudo apt-get install -y -qq apt-utils build-essential libgl1-mesa-glx libglib2.0-0 tesseract-ocr g++
          else
            log "System dependencies already installed ✅"
          fi
          
          # Setup project directory
          log "📁 Setting up project directory..."
          cd ~ && mkdir -p Demo-Python-Deployment
          cd ~/Demo-Python-Deployment
          
          # Git operations
          log "📥 Updating code repository..."
          if [ ! -d ".git" ]; then
            git init
            git remote add origin https://github.com/Astra-Network-Organization/Demo-Python-Deployment.git
          fi
          git fetch origin main
          git reset --hard origin/main
          
          log "✅ Environment preparation completed!"
        ENDSSH

    - name: Install Dependencies on EC2
      timeout-minutes: 5
      run: |
        echo "📚 Installing dependencies on EC2..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i private_key $EC2_USER@$EC2_INSTANCE_IP << 'ENDSSH'
          set -e
          
          # Function for logging
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          log "🐍 Setting up Conda environment..."
          cd ~/Demo-Python-Deployment
          export PATH="$HOME/miniconda/bin:$PATH"
          
          if [ -f "environment.yml" ]; then
            log "📚 Installing dependencies from environment.yml..."
            conda env update --file environment.yml --name base
          else
            log "⚠️ No environment.yml found, using pip fallback..."
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt -q
            fi
          fi
          
          # Install additional packages
          log "📚 Installing additional packages..."
          pip install mediapipe tensorflow opencv-python fastapi qdrant-client google-cloud-vision faiss-cpu -q
          
          log "✅ Dependencies installed successfully!"
        ENDSSH

    - name: Deploy to EC2
      timeout-minutes: 5
      run: |
        echo "🚀 Deploying application to EC2..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i private_key $EC2_USER@$EC2_INSTANCE_IP << 'ENDSSH'
          set -e
          
          # Function for logging
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          log "🚀 Starting final deployment process..."
          log "👤 Deploying as user: $(whoami)"
          log "🖥️ Target server: $(hostname)"
          
          cd ~/Demo-Python-Deployment
          
          # Service management with health check
          log "⚙️ Managing application service..."
          sudo systemctl daemon-reload
          sudo systemctl enable fastapi-demo.service
          sudo systemctl restart fastapi-demo.service
          
          # Wait for service to start
          sleep 5
          
          # Health check
          log "🔍 Performing health check..."
          if sudo systemctl is-active --quiet fastapi-demo.service; then
            log "✅ Service is running successfully!"
            log "📊 Service status: $(sudo systemctl is-active fastapi-demo.service)"
          else
            log "❌ Service failed to start!"
            sudo systemctl status fastapi-demo.service --no-pager
            exit 1
          fi
          
          log "🎉 Deployment completed successfully!"
        ENDSSH

    - name: Verify Deployment
      timeout-minutes: 2
      run: |
        echo "🔍 Verifying deployment..."
        echo "🖥️ Server: $EC2_INSTANCE_IP"
        echo "👤 User: $EC2_USER"
        sleep 10

    - name: Clean up
      if: always()
      run: rm -f private_key

    - name: Deployment Success Notification
      if: success()
      run: |
        echo "🎉 Conda deployment completed successfully!"
        echo "📍 Application is running on: $EC2_INSTANCE_IP"
        echo "👤 Deployed as user: $EC2_USER"
        echo "⏰ Deployment time: $(date)"

    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "💥 Conda deployment failed!"
        echo "🖥️ Target server: $EC2_INSTANCE_IP"
        echo "👤 Target user: $EC2_USER"
        echo "🔍 Check the logs above for error details"
        echo "🕐 Failed at: $(date)"
        exit 1
