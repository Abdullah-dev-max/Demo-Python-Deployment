name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # -------------------------------
  # CI: Enhanced EC2 connectivity test
  # -------------------------------
  test:
    name: Test EC2 Connectivity
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-warnings"

      - name: Verify EC2 Access and Resources
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ./deploy_key.pem
          chmod 400 ./deploy_key.pem
          ssh -i ./deploy_key.pem \
              -o StrictHostKeyChecking=no \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_INSTANCE_IP }} \
              "echo 'EC2 connection successful!';
               echo '--- System Resources ---';
               free -h;
               df -h;
               nproc;
               echo 'Checking Conda...';
               conda --version || echo 'Conda not installed';
               echo 'Checking Python...';
               python3 --version"
          
  # -------------------------------
  # CD: Robust Deployment
  # -------------------------------
  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-warnings"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          command_timeout: '30m'  # Increased timeout
          script_timeout: '30m'
          script: |
            # 0. Setup environment
            export PATH="$HOME/miniconda/bin:$PATH"
            
            # 1. Clean previous deployment (with error suppression)
            sudo rm -rf /home/ubuntu/Astra || true
            mkdir -p /home/ubuntu/Astra/KYC
            cd /home/ubuntu/Astra/KYC

            # 2. Clone fresh code with retries
            for i in {1..3}; do
              git clone https://github.com/${{ github.repository }}.git . && break || sleep 10
            done

            # 3. Conda setup with robust initialization
            if ! command -v conda &>/dev/null; then
              wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
              bash miniconda.sh -b -p $HOME/miniconda
              echo 'export PATH="$HOME/miniconda/bin:$PATH"' >> ~/.bashrc
            fi
            source ~/.bashrc
            eval "$(conda shell.bash hook)"
            conda init bash >/dev/null 2>&1
            conda activate kyc || {
              conda create -n kyc python=3.12.9 -y && 
              conda activate kyc
            }

            # 4. Optimized package installation
            echo "--- Installing dependencies ---"
            pip install --prefer-binary --no-cache-dir -r requirements_CPU.txt || {
              echo "First attempt failed, retrying with verbose output...";
              pip install -v -r requirements_CPU.txt;
            }

            # 5. Process management with verification
            echo "--- Restarting FastAPI ---"
            pkill -f "uvicorn main:app" || true
            nohup uvicorn main:app --host 0.0.0.0 --port 8080 > uvicorn.log 2>&1 &
            
            # 6. Enhanced deployment verification
            sleep 10
            if curl -s http://localhost:8080 | grep -q "Welcome"; then
              echo "Deployment successful!";
              echo "Uvicorn process:";
              pgrep -a uvicorn;
            else
              echo "Deployment failed! Logs:";
              tail -20 uvicorn.log;
              exit 1;
            fi
